volumes:
  kafka_data:
    driver: local

services:

  api-service:
    image: api-service
    ports:
      - "8080:8080"
    depends_on:
      - llm-service
      - history-service
    environment:
      - LLM_ENDPOINT=llm-service:8082
      - HISTORY_ENDPOINT=history-service:8083
#
  llm-service:
    image: llm-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - ollama
    environment:

      - OLLAMA_ENDPOINT=ollama:11434

  history-service:
    image: history-service
    ports:
      - "8083:8083"
    depends_on:
      - postgres
    environment:
      - POSTGRES_ENDPOINT=postgresql://user:pass@postgres:5432/postgres


  ollama:
    image: ollama/ollama:latest
    ports:
      - 11434:11434
    volumes:
      - .:/code
      - ./ollama/ollama:/root/.ollama
      - ./entrypoint.sh:/entrypoint.sh
    container_name: ollama
    pull_policy: always
    tty: true
    restart: always
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    entrypoint: [ "/usr/bin/bash", "/entrypoint.sh" ]

  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ollama-webui
    volumes:
      - ./ollama/ollama-webui:/app/backend/data
    depends_on:
      - ollama
    ports:
      - 8090:8080
    environment: # https://docs.openwebui.com/getting-started/env-configuration#default_models
      - OLLAMA_BASE_URLS=http://ollama:11434
      - ENV=dev
      - WEBUI_AUTH=False
      - WEBUI_NAME=valiantlynx AI
      - WEBUI_URL=http://localhost:8090
      - WEBUI_SECRET_KEY=t0p-s3cr3t
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    ports:
      - 5432:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=user
      - POSTGRES_DB=postgres

#  kafka:
#    image: docker.io/bitnami/kafka:3.4.0-debian-11-r23
#    networks:
#      - kafka_net
#    ports:
#      - "9094:9094"
#    volumes:
#      - "kafka_data:/bitnami"
#    environment:
#      - BITNAMI_DEBUG=yes
#      - ALLOW_PLAINTEXT_LISTENER=yes
#      - KAFKA_KRAFT_CLUSTER_ID=9YoavaRpTCOitT3Dm2OQFQ
#      # For more details see  https://rmoff.net/2018/08/02/kafka-listeners-explained/
#      - KAFKA_CFG_LISTENERS=CLIENT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
#      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9094
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
#
#  kafka-schema-registry:
#    image: bitnami/schema-registry:6.0
#    ports:
#      - "8081:8081"
#    depends_on:
#      kafka:
#        condition: service_started
#    environment:
#      SCHEMA_REGISTRY_DEBUG: true
#      SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka:9092
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:v0.7.0
#    ports:
#      - "8088:8080"
#    depends_on:
#      kafka:
#        condition: service_started
#      kafka-schema-registry:
#        condition: service_started
#    environment:
#      KAFKA_CLUSTERS_0_NAME: baeldung
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
#      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://kafka-schema-registry:8081
#      DYNAMIC_CONFIG_ENABLED: 'true'